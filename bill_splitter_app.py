# -*- coding: utf-8 -*-
"""Bill Splitter App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WRjPwmUIqgAk42zTQE9Q3cHW2SQPkHzR
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install qrcode[pil]

# Commented out IPython magic to ensure Python compatibility.
# %pip install razorpay

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

# Bill Splitter App with UPI Simulation
# Tech Stack: Streamlit (for UI), Python (Logic), Simulated UPI Flow + QR Code

import streamlit as st
import pandas as pd
import uuid
import qrcode
from PIL import Image
from io import BytesIO

st.set_page_config(page_title="Bill Splitter with UPI", layout="centered")
st.title("üßæ Bill Splitter App with UPI Simulation")

# Session state setup
if "expenses" not in st.session_state:
    st.session_state.expenses = []
if "payments" not in st.session_state:
    st.session_state.payments = {}

# --- Add Participants ---
st.header("1. Enter Participants")
participants_input = st.text_input("Enter names separated by commas (e.g., Alice,Bob,Charlie)")

if participants_input:
    participants = [p.strip() for p in participants_input.split(",") if p.strip() != ""]
    st.success(f"Participants added: {', '.join(participants)}")
else:
    participants = []

# --- Add Expenses ---
st.header("2. Add Expenses")
if participants:
    expense_title = st.text_input("Expense Title (e.g., Dinner, Snacks)")
    amount = st.number_input("Total Amount", min_value=0.0, step=0.5)
    paid_by = st.selectbox("Paid By", participants)
    split_type = st.radio("Split Type", ["Equally", "Custom Share"])

    custom_share = {}
    if split_type == "Custom Share":
        st.subheader("Enter Custom Amount per Person")
        for p in participants:
            val = st.number_input(f"{p}'s Share", key=f"share_{p}", min_value=0.0, step=0.5)
            custom_share[p] = val

    if st.button("Add Expense"):
        if split_type == "Equally":
            share = round(amount / len(participants), 2)
            split = {p: share for p in participants}
        else:
            split = custom_share

        expense = {
            "id": str(uuid.uuid4()),
            "title": expense_title,
            "amount": amount,
            "paid_by": paid_by,
            "split": split
        }
        st.session_state.expenses.append(expense)
        st.success("Expense added!")

# --- Expense List ---
st.header("3. Expense Summary")
if st.session_state.expenses:
    for e in st.session_state.expenses:
        st.markdown(f"**{e['title']}** | Paid by: {e['paid_by']} | ‚Çπ{e['amount']}")
        for p, s in e['split'].items():
            st.markdown(f"- {p}: ‚Çπ{s}")
        st.markdown("---")

# --- Calculate Balances ---
st.header("4. Balance & Payment Links")
balance = {p: 0.0 for p in participants}

for e in st.session_state.expenses:
    for p in e['split']:
        balance[p] -= e['split'][p]
    balance[e['paid_by']] += e['amount']

df = pd.DataFrame.from_dict(balance, orient='index', columns=["Balance (‚Çπ)"])
df = df.reset_index().rename(columns={"index": "Participant"})
df["Balance (‚Çπ)"] = df["Balance (‚Çπ)"].astype(float)
st.table(df.style.format({"Balance (‚Çπ)": "{:.2f}"}))

import razorpay

# üîê Razorpay API Key Setup
import os
RAZORPAY_KEY_ID = os.getenv("rzp_test_qWamt5NrtBV4D7")
RAZORPAY_KEY_SECRET = os.getenv("aRtFXWrRv1euWl3wcxgS46ar")
        # ‚Üê Replace with your real secret
client = razorpay.Client(auth=(RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET))

# --- Real Razorpay UPI Payment with QR ---
st.header("5. Razorpay UPI Payment")
for payer, amt in balance.items():
    if amt < 0:
        receivers = [r for r in balance if balance[r] > 0]
        for receiver in receivers:
            to_pay = min(abs(amt), balance[receiver])
            if to_pay > 0:
                st.write(f"**{payer} ‚Üí {receiver}: ‚Çπ{to_pay:.2f}**")

                try:
                    payment = client.payment_link.create({
                        "amount": int(to_pay * 100),  # amount in paise
                        "currency": "INR",
                        "description": f"{payer} pays {receiver}",
                        "customer": {
                            "name": payer,
                            "email": f"{payer.lower()}@example.com"
                        },
                        "callback_url": "https://example.com/success",
                        "callback_method": "get"
                    })

                    url = payment["short_url"]
                    st.markdown(f"[üí≥ Pay Now (‚Çπ{to_pay:.2f})]({url})", unsafe_allow_html=True)

                    qr = qrcode.make(url)
                    buf = BytesIO()
                    qr.save(buf, format="PNG")
                    st.image(buf.getvalue(), caption="Scan QR to Pay", width=200)

                    if st.button(f"‚úÖ Mark as Paid: {payer} to {receiver}"):
                        balance[payer] += to_pay
                        balance[receiver] -= to_pay
                        st.success(f"{payer} paid ‚Çπ{to_pay:.2f} to {receiver}")
                        break

                except Exception as e:
                    st.error(f"Error creating payment link: {e}")


# --- Reset Button ---
st.sidebar.button("üîÑ Reset App", on_click=lambda: st.session_state.clear())

# Save your streamlit code as a Python file, e.g., your_script_name.py
# Then run it using the following command:
# !streamlit run your_script_name.py

# Since Streamlit requires a web server and a separate process to run,
# and Colab notebooks are primarily designed for interactive code execution,
# running a full Streamlit app directly within a standard Colab cell
# might require additional setup (like using ngrok for tunneling)
# to make the web interface accessible.

# For this example, I'll just show you the command you would typically use.
# You would need to adapt this based on how you are hosting/running your Streamlit app.
# !streamlit run your_script_name.py

